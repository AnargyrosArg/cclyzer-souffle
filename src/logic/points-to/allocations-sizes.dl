///------------------------------------------
/// Tracking of allocation size
///------------------------------------------

// Indicates an array allocation instead of a single element

array_allocation(?alloc) :-
   allocation_type(?alloc, ?type),
   array_type(?type).


//-----------------------
// Stack Allocations
//-----------------------

// An array of elements is allocated in stack, if a size argument is
// provided to the `alloca` instruction

array_allocation(?stackAlloc) :-
   alloca_instruction_size(?insn, _),
   stack_allocation_by_instruction(?insn, ?stackAlloc).

// The size in bytes can be computed by the size of the allocation
// types and the number of elements being allocated (if a constant
// operand was provided).

allocation_size(?stackAlloc, (?numElements)*(?size)) :-
   alloca_instruction_size(?insn, ?operand),
   constant_to_int(?operand, ?numElements),
   stack_allocation_by_instruction(?insn, ?stackAlloc),
   allocation_type(?stackAlloc, ?type),
   type_has_size(?type, ?size).

allocation_size(?stackAlloc, ?size) :-
   alloca_instruction(?insn),
   !alloca_instruction_size(?insn, _),
   stack_allocation_by_instruction(?insn, ?stackAlloc),
   allocation_type(?stackAlloc, ?type),
   type_has_size(?type, ?size).

allocation_size(?stackAlloc, ?size) :-
   stack_allocation_by_parameter(_, _, ?stackAlloc),
   allocation_type(?stackAlloc, ?type),
   type_has_size(?type, ?size).


//-----------------------
// Heap Allocations
//-----------------------

array_allocation(?heapAlloc) :-
   heap_allocation_by_malloc(?insn, ?heapAlloc),
   call_instruction_arg(?insn, 0, ?operand),
   variable(?operand).

array_allocation(?heapAlloc) :-
   heap_allocation_by_realloc(?insn, ?heapAlloc),
   call_instruction_arg(?insn, 1, ?operand),
   variable(?operand).

array_allocation(?heapAlloc) :-
   heap_allocation_by_calloc(?insn, ?heapAlloc),
   call_instruction_arg(?insn, _, ?operand),
   variable(?operand).

// Compute sizes when available

allocation_size(?heapAlloc, ?size) :-
   heap_allocation_by_instruction(?insn, ?heapAlloc),
   sized_alloc_instr(?insn, ?size).

// First compute size of allocation instruction, if statically
// available

.decl sized_alloc_instr(?insn: Instruction, ?size: number)

sized_alloc_instr(?insn, ?size) :-
   function_has_name("@malloc", ?func),
   (call_instruction_fn_target(?insn, ?func),
    call_instruction_arg(?insn, 0, ?operand)
    ;
    invoke_instruction_fn_target(?insn, ?func),
    invoke_instruction_arg(?insn, 0, ?operand)),
   constant_to_int(?operand, ?size).

sized_alloc_instr(?insn, ?size) :-
   function_has_name("@realloc", ?func),
   (call_instruction_fn_target(?insn, ?func),
    call_instruction_arg(?insn, 1, ?operand)
    ;
    invoke_instruction_fn_target(?insn, ?func),
    invoke_instruction_arg(?insn, 1, ?operand)),
   constant_to_int(?operand, ?size).

sized_alloc_instr(?insn, (?size) * (?nmemb)) :-
   function_has_name("@calloc", ?func),
   (call_instruction_fn_target(?insn, ?func),
    call_instruction_arg(?insn, 0, ?nmembOp),
    call_instruction_arg(?insn, 1, ?sizeOp)
    ; 
    invoke_instruction_fn_target(?insn, ?func),
    invoke_instruction_arg(?insn, 0, ?nmembOp),
    invoke_instruction_arg(?insn, 1, ?sizeOp)),
   constant_to_int(?nmembOp, ?nmemb),
   constant_to_int(?sizeOp, ?size).
