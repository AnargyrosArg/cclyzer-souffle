//-----------------------------------
// Basic Allocation Type Hierarchy
//-----------------------------------

.type Allocation
.type BasicAllocation     = Allocation
.type StackAllocation     = BasicAllocation
.type HeapAllocation      = BasicAllocation
.type GlobalAllocation    = BasicAllocation

/*
.type AllocationInstruction = CallInstruction | AllocaInstruction
.type AllocationByInstr = [?instr:AllocationInstruction]
.type AllocationByParam = [?func:FunctionDecl , ?index:number]
.type AllocationByTypeInstr = [?type:Type, ?instr:AllocationInstruction]
*/

.decl allocation(?alloc:Allocation)
.decl basic_allocation(?basicAlloc:BasicAllocation)
.decl stack_allocation(?stackAlloc:StackAllocation)
.decl heap_allocation(?heapAlloc:HeapAllocation)
.decl global_allocation(?globalAlloc:GlobalAllocation)


allocation(?alloc) :-
  basic_allocation(?alloc).


basic_allocation(?alloc) :-
  stack_allocation(?alloc);
  heap_allocation(?alloc);
  global_allocation(?alloc).


//Constructors

.decl stack_allocation_by_instruction(?insn:AllocaInstruction, ?stackAlloc:StackAllocation)
.decl stack_allocation_by_parameter(?func:FunctionDecl, ?index:number, ?stackAlloc:StackAllocation)

.decl heap_allocation_by_instruction(?insn:CallInstruction, ?heapAlloc:HeapAllocation)

.decl global_allocation_by_function(?func:FunctionDecl, ?globalAlloc:GlobalAllocation)
.decl global_allocation_by_variable(?var:GlobalVariable, ?globalAlloc:GlobalAllocation)



.decl heap_alloc_function(?function:Function)
.decl heap_allocation_by_malloc(?insn:CallInstruction, ?heapAlloc:HeapAllocation)
.decl heap_allocation_by_calloc(?insn:CallInstruction, ?heapAlloc:HeapAllocation)
.decl heap_allocation_by_realloc(?insn:CallInstruction, ?heapAlloc:HeapAllocation)
.decl heap_allocation_by_rust_alloc(?insn:CallInstruction, ?heapAlloc:HeapAllocation)


.output heap_allocation_by_malloc
.output heap_allocation_by_calloc
.output heap_allocation_by_realloc
.output heap_allocation_by_rust_alloc                                     

//---------------------------------------------------------------------------
// [Pointer-compatible allocations]
//
// Allocations that may be used as pointers (e.g., can be dereferenced
// to get another memory location).
//---------------------------------------------------------------------------

.decl ptr_compatible_allocation(?alloc:Allocation) 


// We consider all stack and heap allocations as pointer-compatible

ptr_compatible_allocation(?alloc) :-
   stack_allocation(?alloc)
 ; heap_allocation(?alloc).


// Global constants cannot point-to anything, since storing to them
// would change their contents

ptr_compatible_allocation(?alloc) :-
   global_allocation_by_variable(?globalVar,?alloc),
   ! global_variable_constant(?globalVar).



//-------------------------------------
// Additional pseudo-allocation types
//-------------------------------------
//
.decl non_allocation(?alloc:Allocation)
.decl unknown_location(?alloc:Allocation)
.decl null_location(?alloc:Allocation)


non_allocation(?alloc) :-
   unknown_location(?alloc)
 ; null_location(?alloc).

unknown_location("*unknown*").

null_location("*null*").


//--------------------------------
// Allocation properties
//--------------------------------

// Human readable representation for allocations

.decl allocation_to_string(?alloc:Allocation, ?str:symbol)

// Allocation type

.decl allocation_type(?alloc:Allocation, ?type:Type)

// Allocation size in bytes

.decl allocation_size(?alloc:Allocation, ?size:number)

// Allocation of more than one elements

.decl array_allocation(?alloc:Allocation)

// Allocation position on source code (requires debug info)

.decl allocation_pos(?alloc:Allocation, ?line:number , ?column:number)

