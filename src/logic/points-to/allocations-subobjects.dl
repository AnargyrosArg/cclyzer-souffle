//------------------------------------------------------------------------------
// [Definition of memory subregions (as subtypes of allocation)]
//
// We define a subregion as either (i) a field of an existing region
// (which itself is either a subregion or a normal allocation), or
// (ii) an array/pointer index of an existing region.
//
// In the second case, the index can be either a constant (which we
// record) or a variable. This corresponds to two different
// constructors, that in essence produce two distinct algebraic data
// types (plus a single one for referencing struct fields).
//
// When the index is unknown on the other hand (variable case), there
// is no index to record. In the string representation protocol as
// well as in code documentation, we will represent the unknown index
// with a star (*).
//
// As a final note, the need to create subregions stems from the fact
// that in C, we can refer to field addresses, and at a later point
// dereference them. This translates to a `getelementptr` instruction
// that computes the offset from a base pointer variable and assigns
// it to some other variable, which may then be supplied as the
// address operand to a `load`/`store` instruction. These two
// instructions may reside in different functions, so an
// intraprocedural matching would not work.
//
// This is an important difference with the Java Bytecode IR, where no
// such thing is possible and a single relation that connects two
// abstract objects (memory allocations) through some field is
// sufficient.
//------------------------------------------------------------------------------


.type AllocSubregion = Allocation



.decl alloc_subregion_base(?region: AllocSubregion, ?base: Allocation)
.decl alloc_subobject(?alloc: AllocSubregion, ?baseAlloc: Allocation)

.decl alloc_subregion(?allocSub: AllocSubregion)
allocation(?region) :-
   alloc_subregion(?region).

ptr_compatible_allocation(?alloc) :-
   ptr_compatible_allocation(?baseAlloc),
   alloc_subobject(?alloc, ?baseAlloc), // OPT CLAUSE
   alloc_subregion_base(?alloc,?baseAlloc).

//---------------------------------------------------------------
// [Field Selections]
//---------------------------------------------------------------

// Single constructor for field selections

.decl alloc_subregion_at_field(?alloc: Allocation, ?index: number, ?region:AllocSubregion)

// Create every field sub-expression, once type for base object is
// established

alloc_subregion(?newAlloc)
 , alloc_subregion_at_field(?alloc, ?field, ?newAlloc)
 , allocation_type(?newAlloc, ?fieldType)
 :-
   allocation_type(?alloc, ?type),
   // filter base allocations
   alloc_subregion(?alloc),
   // determine type
   struct_type(?type),
   struct_type_field(?type, ?field, ?fieldType),
   ?newAlloc= cat(cat(?alloc, "sub"), to_string(?field)).


//---------------------------------------------------------------
// [Array Element Selections: unknown *star* index]
//---------------------------------------------------------------

// Constructor for unknown array/pointer index
.decl alloc_subregion_at_any_array_index(?alloc: Allocation, ?region: AllocSubregion)


// Create star pointer index expression, once type for base object is
// established

alloc_subregion(?newAlloc)
 , alloc_subregion_at_any_array_index(?alloc, ?newAlloc)
 , allocation_type(?newAlloc, ?type)
 :-
   allocation_type(?alloc, ?type),
   // base object
   basic_allocation(?alloc),
   ?newAlloc=cat(?alloc,"sub").

// Create star array index expression, once type for base object is
// established

alloc_subregion(?newAlloc)
 , alloc_subregion_at_any_array_index(?alloc, ?newAlloc)
 , allocation_type(?newAlloc, ?elementType)
 :-
   allocation_type(?alloc, ?type),
   // filter base allocations
   alloc_subregion(?alloc),
   // determine type
   array_type(?type),
   array_type_has_component(?type, ?elementType),
   ?newAlloc=cat(?alloc,"sub").


//---------------------------------------------------------------
// [Array Element Selections: known index]
//---------------------------------------------------------------

// Constructor for constant array/pointer index

.decl alloc_subregion_at_array_index(?alloc: Allocation, ?index: number, ?region: AllocSubregion)

// Create every pointer index expression, once type for base object is
// established

alloc_subregion(?newAlloc),
   alloc_subregion_at_array_index(?alloc, ?index, ?newAlloc),
   allocation_type(?newAlloc, ?type)
 :-
   allocation_type(?alloc, ?type),
   // base object
   basic_allocation(?alloc),
   // first index is a constant
   pointer_index(?index),
   ?newAlloc= cat(cat(?alloc,"sub"), to_string(?index)).


// Record trivial zero aliases on base objects

.decl allocation_zeroalias(?alloc: Allocation)
allocation_zeroalias(?newAlloc) :-
   basic_allocation(?alloc),
   alloc_subregion_at_array_index(?alloc, 0, ?newAlloc),
   allocation_type(?newAlloc,?type),
   allocation_type(?alloc,?type).

.decl ptr_points_to_no_zero_aliases(?toCtx: AllocationContext, ?to: Allocation, ?fromCtx: AllocationContext, ?from: Allocation)
ptr_points_to_no_zero_aliases(?toCtx, ?to, ?fromCtx, ?from) :-
   ptr_points_to(?toCtx, ?to, ?fromCtx, ?from),
   !allocation_zeroalias(?to),
   !allocation_zeroalias(?from).


// Create star array index expression, once type for base object is
// established

alloc_subregion(?newAlloc),
   alloc_subregion_at_array_index(?alloc, ?index, ?newAlloc),
   allocation_type(?newAlloc, ?elementType)
 :-
   allocation_type(?alloc, ?type),
   // filter base allocations
   alloc_subregion(?alloc),
   // determine type
   array_type(?type),
   array_type_has_component(?type, ?elementType),
   // accept any relevant array index for this type
   array_indices(?type, ?index),
   ?newAlloc = cat(cat(?alloc, "sub"), to_string(?index)).


// Find all statically possible pointer indices

.decl pointer_index(?index: number)
pointer_index(0).

pointer_index(?index) :-
   getelementptr_instruction_index(_, 0,?indexOp),
   constant_to_int(?indexOp,?index),
   ?index >= 0.

// Find all statically possible array indices

.decl array_indices__no_typecomp(?type: ArrayType, ?index: number)

array_indices__no_typecomp(?declaredType, ?constantIndex) :-
   getelementptr_instruction_index(?insn, ?index, ?indexOp),
   getelementptr_instruction_interm_type(?insn, ?index, ?declaredType),
   constant_to_int(?indexOp, ?constantIndex),
   array_type(?declaredType).

// Same thing, but also consider compatible array types

.decl array_indices(?type: ArrayType, ?index: number)

array_indices(?type, ?constantIndex) :-
   array_type(?type),
   type_compatible(?type, ?declaredType),
   array_indices__no_typecomp(?declaredType, ?constantIndex).


//-------------------------------------------------------------------
// Subobject properties
//-------------------------------------------------------------------

// Region base: unified predicate that applies to all types of
// subobjects
alloc_subregion_base(?region, ?base) :-
   alloc_subregion_at_field(?base, _, ?region).

alloc_subregion_base(?region, ?base) :-
   alloc_subregion_at_any_array_index(?base, ?region).

alloc_subregion_base(?region, ?base) :-
   alloc_subregion_at_array_index(?base, _, ?region).

// Index Optimization predicate

alloc_subobject(?alloc, ?baseAlloc) :-
   alloc_subregion_base(?alloc, ?baseAlloc).

//-------------------------------------
// String Representation Protocol
//-------------------------------------


allocation_to_string(?region, ?regionStr) :-
   alloc_subregion_at_array_index(?alloc, ?index, ?region),
   allocation_to_string(?alloc, ?allocStr),
   ?indexStr = to_string(?index),
   ?regionStr = cat(cat(cat(?allocStr, "["), ?indexStr), "]").

allocation_to_string(?region, ?regionStr) :-
   alloc_subregion_at_any_array_index(?alloc, ?region),
   allocation_to_string(?alloc, ?allocStr),
   ?regionStr = cat(?allocStr, "[*]").

allocation_to_string(?region, ?regionStr) :-
   allocation_type(?alloc, ?type),
   struct_type_field_name(?type, ?index, ?fieldName),
   alloc_subregion_at_field(?alloc, ?index, ?region),
   allocation_to_string(?alloc, ?allocStr),
   ?indexStr = to_string(?index),
   ?regionStr = cat(cat(cat(cat(?allocStr,"."), ?fieldName), "/"), ?indexStr).

allocation_to_string(?region, ?regionStr) :-
   allocation_type(?alloc, ?type),
   !struct_type_field_name(?type, ?index, _),
   alloc_subregion_at_field(?alloc, ?index, ?region),
   allocation_to_string(?alloc, ?allocStr),
   ?indexStr = to_string(?index),
   ?regionStr = cat(cat(?allocStr, ".?/"), ?indexStr).


//------------------------------------------------------------------------
// [Deprecated: Maximum Subobject Depth]
//
// Note that pointer arithmetic and other C idioms may cause infinite
// recursion and creation of new subobjects. For instance, the
// instruction: `ptr = ptr + 1` when translated to a `getelementptr`
// instruction, it will create a new subobject relative to the one
// that `ptr` points to with some offset. However, this subobject will
// again flow to the base variable `ptr` triggering the creation of
// yet a new subobject. This creation of new subobjects will continue
// indefinitely.
//
// DEPRECATED:
// To avoid non-termination we introduce a bound to object
// depth. Hence, we do not create a new subobject when this bound is
// going to be exceeded.
//
// Since we now create subobjects (e.g., by field access, or array
// indexing) *only* when the analysis has discovered the type of the
// base object, we no longer need a bound on object depth. Types alone
// are sufficient to prohibit infinite object recursion, since the
// type of the base object will always have a greater size compared to
// that of any of its subobjects. Hence, as the object depth grows,
// the object size will become smaller until it reaches zero (no
// infinite recursion is possible).
//------------------------------------------------------------------------

// field_sensitivity:max_depth[] = N ->
//    int[64](N).

// field_sensitivity:max_depth[] = 5.

// alloc_subregion(Alloc) -> allocation:depth[Alloc] = _.

// _may_expand_base_alloc(Alloc) -> allocation(Alloc).
// _may_expand_alloc_with_field(Alloc) -> allocation(Alloc).

// lang:isEntity[`_may_expand_base_alloc] = false.
// lang:isEntity[`_may_expand_alloc_with_field] = false.

// Allocation is allowed to create subobjects as maximum depth has not
// been reached

// _may_expand_base_alloc(Alloc) <-
//    field_sensitivity:max_depth[] = MaxDepth,
//    allocation:depth[Alloc] = N,
//    N < MaxDepth.


//------------------------------------
// Region containment
//------------------------------------

.decl region_contains(?outer: AllocSubregion, ?inner: Allocation)

region_contains(?outer, ?inner) :-
   alloc_subregion_base(?inner, ?outer).

region_contains(?outer, ?inner) :-
   alloc_subobject(?inner, ?interm),
   region_contains(?outer, ?interm).

// Non-allocations (e.g., *null*) cannot contain anything

//non_allocation(NonAlloc) ->
//   !region_contains(NonAlloc, _).
