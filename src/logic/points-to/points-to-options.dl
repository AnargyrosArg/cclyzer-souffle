//------------------------------------------------------------------------------
// [Marks all functions as reachable]
//
// This is useful if the artifact to be analyzed doesn't have any
// known entry points (e.g., dynamic library). In such a case, it
// makes sense to treat all functions defined therein as potential
// entry points.
//------------------------------------------------------------------------------

.decl user_options_entrypoints(?value: symbol)

//user_options_entrypoints("library").

//reachable_context(?ctx, ?f) :-
//   empty_context(?ctx),
//   user_options_entrypoints("library"),
//   function(?f).


//------------------------------------------------------------------------------
// [Handle Pointer Arithmetic]
//
// Handling pointer arithmetic in a sound way is quite expensive. It
// may double the overall analysis time. Hence, it is optional and can
// be turned on/off with the folowing configuration option.
//------------------------------------------------------------------------------

.decl user_options_pointer_arithmetic(?value: symbol)

user_options_pointer_arithmetic(?value) :-
   ?value = "on"
 ; ?value = "off".

.decl analyze_pointer_arithmetic()
//analyze_pointer_arithmetic() :-
//   user_options_pointer_arithmetic("on").

//user_options_pointer_arithmetic("on").

//------------------------------------------------------------------------------
// [Handle optimized code]
//
// Similarly, handling optimized code requires a set of techniques
// that may be completely redundant or even harmful for the precision
// of the analysis, in the common case (non-optimized code). Hence, it
// is optional and can be turned on/off with the folowing
// configuration option.
//
// For instance, code optimizations may include inlined
// constructors. In such a case, we cannot rely on the presence of a
// call to a constructor after a heap allocation instruction, to be
// able to identify the type of the allocation.
//------------------------------------------------------------------------------

.decl user_options_optimized_code(?value: symbol)

//user_options_optimized_code(?value) :-
//   ?value = "on"
// ; ?value = "off".

.decl inlined_constructors()
//inlined_constructors() :-
//   user_options_optimized_code("on").
