//--------------------------------------------------------------------
// [Virtual Table of Type Info Objects]
//
// We assume that the compiled program adheres to the
// industry-standard Itanium C++ ABI.
//
// In order to identify vtables, we track the existence of <typeinfo>
// objects inside global variable arrays, which we then label as
// vtables. To identify type info objects, we must first track their
// vpointers to their own virtual tables.
//
// https://mentorembedded.github.io/cxx-abi/abi.html#rtti-layout
//--------------------------------------------------------------------

.decl vtable(?vt: GlobalVariable, ?name: symbol)
.decl vtable_typeinfo(?vt: GlobalVariable,?typeInfo: GlobalVariable)

.decl typeinfo_vtable(?vt: GlobalVariable, ?name: symbol)
vtable(?vt, ?name) :-
   typeinfo_vtable(?vt, ?name).

typeinfo_vtable(?vt, ?name) :-
   external_linkage_type(?externalLinkage),
   global_variable_has_linkage_type(?vt, ?externalLinkage),
   global_variable_has_name(?vt, ?name),
   match("%class_type_info%",?name),
   match("%cxxabi%",?name).

.decl typeinfo_vtable_baseclass(?vt: GlobalVariable, ?name: symbol)
typeinfo_vtable_baseclass(?vt, ?name) :-
   typeinfo_vtable(?vt, ?name),
   !match("%__si_class_type_info%",?name),
   !match("%__vmi_class_type_info%",?name),
   match("%__class_type_info%",?name).

.decl typeinfo_vtable_single_inheritance(?vt: GlobalVariable, ?name: symbol)
typeinfo_vtable_single_inheritance(?vt: GlobalVariable, ?name: symbol) :-
   typeinfo_vtable(?vt, ?name),
   match("%__si_class_type_info%",?name).

.decl typeinfo_vtable_multiple_inheritance(?vt: GlobalVariable, ?name: symbol)
typeinfo_vtable_multiple_inheritance(?vt, ?name) :-
   typeinfo_vtable(?vt, ?name),
   match("%__vmi_class_type_info%",?name).


// Track flow of vpointers to constants

.decl constant_contains_vptr(?vt: GlobalVariable, ?constant: Constant)
constant_contains_vptr(?vt, ?constant) :-
   global_variable_constant_name(?constant, ?name),
   vtable(?vt, ?name).

constant_contains_vptr(?vt, ?outer) :-
   getelementptr_constant_expression_base(?outer,?inner),
   constant_contains_vptr(?vt, ?inner).

constant_contains_vptr(?vt, ?outer) :-
   bitcast_constant_expression_from(?outer, ?inner),
   constant_contains_vptr(?vt, ?inner).

constant_contains_vptr(?vt, ?outer) :-
   constant_struct_index(?outer, 0, ?inner),
   constant_contains_vptr(?vt, ?inner).


// Identify the actual type info objects throught their vpointers

typeinfo(TypeInfo), typeinfo:vtable[TypeInfo] = VTable <-
   constant_contains_vptr(VTable, Initializer),
   typeinfo_vtable(VTable, _),
   global_variable:initializer[TypeInfo] = Initializer.

typeinfo:baseclass(TypeInfo) <-
   typeinfo:vtable[TypeInfo] = VT,
   typeinfo_vtable:baseclass(VT, _).

typeinfo:single_inheritance(TypeInfo) <-
   typeinfo:vtable[TypeInfo] = VT,
   typeinfo_vtable:single_inheritance(VT, _).

typeinfo:multiple_inheritance(TypeInfo) <-
   typeinfo:vtable[TypeInfo] = VT,
   typeinfo_vtable:multiple_inheritance(VT, _).


// Now identify vtables

_constant_contains_typeinfo(TypeInfo, Constant) <-
   global_variable_constant:to_var[Constant] = TypeInfo,
   typeinfo(TypeInfo).

_constant_contains_typeinfo(TypeInfo, Outer) <-
   bitcast_constant_expression:from[Outer] = Inner,
   _constant_contains_typeinfo(TypeInfo, Inner).

vtable(VT, Name), vtable:typeinfo[VT] = TypeInfo <-
   global_variable:name[VT] = Name,
   global_variable:initializer[VT] = Initializer, // get array constant of vtable
   constant_array:index[Initializer, 1] = TIC,    // type info is at index 1
   _constant_contains_typeinfo(TypeInfo, TIC).


// Recover hints of class hierarchy by identifying cases of typeinfo
// objects inside other typeinfo objects

_typeinfo_contains_typeinfo[Outer, Index] = Inner <-
   typeinfo(Outer),
   global_variable:initializer[Outer] = Initializer,
   constant_struct:index[Initializer, Index] = TIC,
   _constant_contains_typeinfo(Inner, TIC).


typeinfo:base_class[TypeInfo, Offset] = BaseTypeInfo ->
   global_variable(TypeInfo), int[64](Offset), global_variable(BaseTypeInfo).


// Single inheritance case
typeinfo:base_class[TypeInfo, 0] = BaseTypeInfo <-
   typeinfo:single_inheritance(TypeInfo),
   _typeinfo_contains_typeinfo[TypeInfo, 2] = BaseTypeInfo.

// Multiple inheritance case
typeinfo:base_class[TypeInfo, Offset] = BaseTypeInfo <-
   typeinfo:multiple_inheritance(TypeInfo),
   _typeinfo_contains_typeinfo[TypeInfo, Index] = BaseTypeInfo,
   global_variable:initializer[TypeInfo] = Initializer,
   constant_struct:index[Initializer, Index + 1] = Constant,
   constant:to_int[Constant] = OffsetMask,
   Offset = OffsetMask / 256.

// see RTTI Layout of Itanium C++ ABI


// Find the functions stored inside each vtable

vtable:function[VT, Index] = Function ->
   global_variable(VT), int[64](Index), function_decl(Function).

vtable:function[VT, Index] = Function <-
   vtable(VT, _),
   global_variable:initializer[VT] = Initializer,
   constant_array:index[Initializer, Index] = FuncAsInteger,
   bitcast_constant_expression:from[FuncAsInteger] = FuncConstant,
   function_constant:function_name[FuncConstant] = FuncName,
   function:name[Function] = FuncName.
