//------------------------------------------------------------------------------
// [Variables]
//
// The first type of instruction operands are variables. In this
// representation, variables correspond to LLVM virtual
// registers. They are either source-level variables with valid names
// or temporaries introduced by LLVM that hold intermediate expressions.
//------------------------------------------------------------------------------

.type Variable
.decl variable(v:Variable)

.decl variable_has_type(v:Variable, type:Type)
.decl variable_is_label(v:Variable)
.decl variable_is_pointer(v:Variable)
.decl variable_is_firstclass(v:Variable)

variable_is_label(Var) :-
   variable_has_type(Var, Type),
   label_type(Type).

variable_is_pointer(Var) :-
   variable_has_type(Var, Type),
   pointer_type(Type).

variable_is_firstclass(Var) :-
   variable_has_type(Var, Type),
   type_is_firstclass(Type).


//------------------------------------------------------------------------------
// [Constants]
//
// The second type of instruction operands are constants. Constants
// may be quite complex (see constant expressions). Their full
// hierarchy is represented in `constants.logic`.
//------------------------------------------------------------------------------

.type Constant
.decl constant(c:Constant)

.decl constant_has_type(c:Constant, type:Type)
.decl constants_equal(c1:Constant, c2:Constant)


//--------------------------------------------------
// [Operands] as union of {variable, constant}
//--------------------------------------------------

.type Operand = Constant | Variable
.decl operand(op:Operand)

operand(c) :-
   constant(c).

operand(v) :-
   variable(v).


// Type predicate

.decl operand_has_type(op:Operand, type:Type)

operand_has_type(var, type) :-
   variable_has_type(var, type).

operand_has_type(c, type) :-
   constant_has_type(c, type).


// Helper predicates

.decl operand_is_firstclass(op:Operand)
.decl operand_is_pointer(op:Operand)

operand_is_firstclass(Op) :-
   operand_has_type(Op, Type),
   type_is_firstclass(Type).

operand_is_pointer(Op) :-
   operand_has_type(Op, Type),
   pointer_type(Type).
